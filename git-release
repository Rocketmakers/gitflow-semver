#!/bin/bash

if [ "$1" != 'major' -a "$1" != 'minor' -a "$1" != 'patch' -a "$1" != 'init' -a "$1" != 'version' ]; then
  >&2 echo "Usage: git release major|minor|patch|init|version"
  exit 1
fi

if [ "$1" == 'version' ]; then
  echo "0.0.0"
  exit 0
fi

if [ `git rev-parse master` != `git rev-parse origin/master 2> /dev/null` ]; then
  >&2 echo "Error: master is out of date with origin, please update/push first!"
  exit 1
fi

lastVersion=`git describe --abbrev=0 master 2> /dev/null`

if [ $? != 0 ]; then
  if [ "$1" == 'init' ]; then
    read -p "No tags found in repo, shall we initialize this repo for gitflow? [Y/n] " -n 1 -r
    echo
    if echo $REPLY | grep -E '^[Nn]$' > /dev/null; then
      exit 1
    else
      git flow init
      lastVersion="0.0.0"
    fi
  else
    >&2 echo "Error: no tags found in repo, run again with 'init' to initialize for gitflow"
    exit 1
  fi
elif [ `git rev-parse develop` != `git rev-parse origin/develop 2> /dev/null` ]; then
  >&2 echo "Error: develop is out of date with origin, please update/push first!"
  exit 1
fi

versionArray=(${lastVersion//./ })
major=${versionArray[0]}
minor=${versionArray[1]}
patch=${versionArray[2]}

if [ "$1" == 'major' ]; then
  newVersion="$((major+1)).0.0"
elif [ "$1" == 'minor' ]; then
  newVersion="$major.$((minor+1)).0"
elif [ "$1" == 'patch' ]; then
  newVersion="$major.$minor.$((patch+1))"
elif [ "$1" == 'init' ]; then
  newVersion="0.1.0"
fi

echo "Last release was version ${lastVersion}."
echo "We're about to create a new $1 release, with version ${newVersion}."
read -p "Continue? [Y/n] " -n 1 -r
echo
if echo $REPLY | grep -E '^[Nn]$' > /dev/null; then
  exit 1
else
  if [ "$1" == 'patch' ]; then
    git flow hotfix start $newVersion
  else
    git flow release start $newVersion
  fi
fi
