#!/bin/bash

if [ "$1" != 'major' -a "$1" != 'minor' -a "$1" != 'patch' ]; then
  >&2 echo "Usage: git release major|minor|patch"
  exit 1
fi

if [ `git rev-parse master` != `git rev-parse origin/master` ]; then
  echo "Error: master is out of date with origin, please update first!"
  exit 1
fi

lastVersion=`git describe --abbrev=0 master`

if [ $? != 0 ]; then
  read -p "No tags found in repo, shall we initialize this repo for gitflow? [y/N] " -n 1 -r
  echo
  if echo $REPLY | grep -E '^[Yy]$' > /dev/null; then
    git flow init
    lastVersion="0.0.0"
  else
    exit 1
  fi
fi

versionArray=(${lastVersion//./ })
major=${versionArray[0]}
minor=${versionArray[1]}
patch=${versionArray[2]}

if [ "$1" == 'major' ]; then
  newVersion="$((major+1)).0.0"
elif [ "$1" == 'minor' ]; then
  newVersion="$major.$((minor+1)).0"
elif [ "$1" == 'patch' ]; then
  newVersion="$major.$minor.$((patch+1))"
fi

echo "Last release was version ${lastVersion}."
echo "We're about to create a new $1 release, with version ${newVersion}."
read -p "Continue? [y/N] " -n 1 -r
echo
if echo $REPLY | grep -E '^[Yy]$' > /dev/null; then
  if [ "$1" == 'patch' ]; then
    git flow hotfix start $newVersion
  else
    git flow release start $newVersion
  fi
fi
