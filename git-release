#!/usr/bin/env node

var Promise = require("bluebird");
var program = require('commander');
var cp = require('child_process');
Promise.promisifyAll(cp);
var fs = require('fs');
Promise.promisifyAll(fs);
var path = require('path');
var semver = require('semver');
var pjson = require('./package.json');

var execOutput = function(command) {
  return cp.execSync(command, { encoding: 'utf8' }).trim();
};

var inquirer = require('inquirer');
inquirer.promptAsync = function(questions) {
  return new Promise(function(resolve, reject) {
    try {
      inquirer.prompt(questions, function(answers) {
        resolve(answers);
      });
    } catch (e) {
      reject(e);
    }
  });
};

var checkBranchUpToDate = function(branchName) {
  var local = execOutput('git rev-parse ' + branchName);
  var remote = execOutput('git rev-parse origin/' + branchName);
  if (local !== remote) {
    console.error("Error: " + branchName + " not up to date with origin");
    process.exit(1);
  }
}

program.
  version(pjson.version).
  option('--init', 'initialize repository').
  parse(process.argv);

try {
  var lastVersion = execOutput('git describe --abbrev=0 --match "[0-9]*" master');
  if (program.init) {
    console.error("Error: looks like this repository has already been initialized");
    process.exit(1);
  }
}
catch (error) {
  if (program.init) {
    try {
      execOutput('git flow init -d');
      execOutput('git flow release start 0.1.0');
      execOutput('git flow release finish -m \'0.1.0\' 0.1.0');
      execOutput('git checkout develop');
      console.log("OK -- this commit is now tagged as version 0.1.0, and we're on develop and ready to roll!");
      console.log("check everything looks alright, and then push");
      process.exit(0);
    }
    catch (error) {
      console.error('something went wrong: ' + error);
      process.exit(1);
    }
  }
  else {
    console.error("Error: no tags found in repo, run again with '--init' to initialize for gitflow");
    process.exit(1);
  }
}

checkBranchUpToDate('master');
checkBranchUpToDate('develop');

console.log('The last version was ' + lastVersion + '.');
inquirer.promptAsync({
  name: 'release',
  message: 'What type of release are we doing?',
  type: 'list',
  choices: [{
    name: 'Major (for breaking changes)',
    value: 'major'
  }, {
    name: 'Minor (for new features with non-breaking changes)',
    value: 'minor'
  }, {
    name: 'Patch (for bug fixes with non-breaking changes)',
    value: 'patch'
  }]
})
.then(function(answers) {
  var version = semver.inc(lastVersion, answers.release);
  console.log('The new version will be ' + version + '.');
  return inquirer.promptAsync({
    name: 'confirm',
    message: 'Sound good?',
    type: 'confirm',
    default: true
  })
  .then(function(answers2) {
    if (!answers2.confirm){
      process.exit(1);
    }
    var branchType = answers.release == 'patch' ? 'hotfix' : 'release';
    console.log(execOutput('git flow ' + branchType + ' start ' + version));
  });
});
